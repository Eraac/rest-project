<?php

namespace CoreBundle\Repository;

use Doctrine\ORM\QueryBuilder;

/**
 * LogRequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogRequestRepository extends AbstractDateRepository
{
    /**
     * @return QueryBuilder
     */
    public function qbFindAll() : QueryBuilder
    {
        return $this->createQueryBuilder('l');
    }

    /**
     * @param QueryBuilder $qb
     * @param string|array $route
     *
     * @return QueryBuilder
     */
    public function filterByRoute(QueryBuilder $qb, $route) : QueryBuilder
    {
        return $this->filterBy($qb, 'route', $route);
    }

    /**
     * @param QueryBuilder $qb
     * @param string|array $path
     *
     * @return QueryBuilder
     */
    public function filterByPath(QueryBuilder $qb, $path) : QueryBuilder
    {
        return $this->filterBy($qb, 'path', $path);
    }

    /**
     * @param QueryBuilder $qb
     * @param string|array $method
     *
     * @return QueryBuilder
     */
    public function filterByMethod(QueryBuilder $qb, $method) : QueryBuilder
    {
        return $this->filterBy($qb, 'method', $method);
    }

    /**
     * @param QueryBuilder $qb
     * @param string|array $query
     *
     * @return QueryBuilder
     */
    public function filterByQuery(QueryBuilder $qb, $query) : QueryBuilder
    {
        return $this->filterBy($qb, 'query', $query);
    }

    /**
     * @param QueryBuilder $qb
     * @param int|string|array $status
     *
     * @return QueryBuilder
     */
    public function filterByStatus(QueryBuilder $qb, $status) : QueryBuilder
    {
        return $this->filterBy($qb, 'status', $status);
    }

    /**
     * @param QueryBuilder $qb
     * @param string|array $ip
     *
     * @return QueryBuilder
     */
    public function filterByIp(QueryBuilder $qb, $ip) : QueryBuilder
    {
        return $this->filterBy($qb, 'ip', $ip);
    }

    /**
     * @param QueryBuilder $qb
     * @param string|array $user
     *
     * @return QueryBuilder
     */
    public function filterByUser(QueryBuilder $qb, $user) : QueryBuilder
    {
        $alias = $this->getAlias($qb);

        $qb->leftJoin($alias . 'user', 'u');

        if (is_array($user)) {
            $expr = $qb->expr()->in('u.id', ':user');
        } else {
            $expr = $qb->expr()->eq('u.id', ':user');
        }

        return $qb
            ->andWhere($expr)
            ->setParameter('user', $user);
    }
}
